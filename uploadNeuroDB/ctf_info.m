#! /usr/bin/octave -qf

#%res4_file = '/host/venus/export02/data/ftadel/subj001_somatosensory_20111109_01_AUX-f.ds/subj001_somatosensory_20111109_01_AUX-f.res4';


#% ===== GET INPUT FILE ======
#% Get input DS folder
arg_list = argv();
if (length(arg_list) < 1)
    error('No input file.');
end
#% Check that folder exists
ds_dir = arg_list{1};
if ~exist(ds_dir)
    error('File does not exist.');
end
#% List res4 files
dslist = dir(fullfile(ds_dir, '*.res4'));
if isempty(dslist)
    error('Cannot find res4 file.');
end
#% Full res4 file
res4_file = fullfile(ds_dir, dslist(1).name);


#% ===== INTIALIZATIONS ======
#% Define constants
MAX_COILS = 8;
MAX_AVERAGE_BINS = 8;
SensorTypes ={...
      'MAG REF',...          #% 0  Reference magnetometer channel          (Set to 5002 to use the definition in coil_def.dat)
      'GRAD REF' ,...        #% 1  Reference 1st-order gradiometer channel (Set to 5003 or 5004 to use the definition in coil_def.dat)
      'MEG REF GRAD2',...    #% 2  Reference 2nd-order gradiometer channel
      'MEG REF GRAD3',...    #% 3  Reference 3rd-order gradiometer channel
      'MEG MAG' ,...         #% 4  Sensor magnetometer channel located in head shell
      'MEG',...              #% 5  Sensor 1st-order gradiometer channel located in head shell
      'MEG GRAD2' ,...       #% 6  Sensor 2nd-order gradiometer channel located in head shell
      'MEG GRAD3',...        #% 7  Sensor 3rd-order gradiometer channel located in head shell
      'EEG REF',...          #% 8  EEG unipolar sensors not on the scalp
      'EEG',...              #% 9  EEG unipolar sensors on the scalp
      'ADC A',...            #% 10 ADC Input Current (Amps)
      'Stim',...             #% 11 Stimulus channel for MEG41
      'Video',...            #% 12 Value recorded from a SONY Video time output ('hhmmssff')
      'HLU',...              #% 13 Measured position of head and head coils
      'DAC',...              #% 14 DAC channel from ECC or HLU
      'SAM',...              #% 15 SAM channel derived through data analysis
      'Virtual',...          #% 16 Virtual channel derived by combining two or more physical channels
      'SysClock',...         #% 17 System time showing elapsed time since trial started
      'ADC V',...            #% 18 ADC volt channels from ECC
      'StimA', ...           #% 19 Analog trigger channels
      'StimD', ...           #% 20 Digital trigger channels
      'EEG bipolar', ...     #% 21 EEG bipolar sensor not on the scalp
      'EEG ADC', ...         #% 22 EEG ADC over range flags
      'Reset', ...           #% 23 MEG resets (counts sensor jumps for crosstalk purposes)
      'Dipole', ...          #% 24 Dipole source
      'NSAM', ...            #% 25 Normalized SAM channel derived through data analysis
      'AngleRef', ...        #% 26 Orientation of head localization field
      'LOC', ...             #% 27 Extracted signal from each sensor of field generated by each localization coil
      'FitErr', ...          #% 28 Fit error from each head localization coil
      'Other', ...           #% 29 Any other type of sensor not mentioned but still valid
      'Invalid'              #% 30 Invalid
      };

             
#%#% ===== READING .RES4 FILE =====
#% Open file (Big-endian byte ordering)
#% [fid,message] = fopen(res4_file, 'rb', 's');
[fid,message] = fopen(res4_file, 'rb', 'b');
if fid < 0
    error(message);
end

#% Read HEADER
hdr = fread(fid,8,'char')';

#% Read nfSetUp
res4.appName         = char(fread(fid,256,'char')');
res4.dataOrigin      = char(fread(fid,256,'char')');
res4.dataDescription = char(fread(fid,256,'char')');
res4.no_trials_avgd  =      fread(fid,  1,'int16')';
res4.data_time       = char(fread(fid,255,'char')');
res4.data_date       = char(fread(fid,255,'char')');

gSetUp.no_samples  = fread(fid,1,'int32')';
gSetUp.no_channels = fread(fid,1,'int16')';
fseek(fid, ceil(ftell(fid)/8)*8, -1);
gSetUp.sample_rate = fread(fid,1,'double')';
fseek(fid, ceil(ftell(fid)/8)*8, -1);
gSetUp.epoch_time  = fread(fid,1,'double')';
gSetUp.no_trials   = fread(fid,1,'int16')';
fseek(fid, ceil(ftell(fid)/4)*4, -1);
gSetUp.preTrigPts  = fread(fid,1,'int32')';
gSetUp.no_trials_done = fread(fid,1,'int16')';
gSetUp.no_trials_display = fread(fid,1,'int16')';
fseek(fid, ceil(ftell(fid)/4)*4, -1);
gSetUp.save_trials         = fread(fid,1,'int32')';
gSetUp.primaryTrigger      = char(fread(fid,1,'uchar')');
gSetUp.secondaryTrigger    = char(fread(fid,MAX_AVERAGE_BINS,'uchar')');
gSetUp.triggerPolarityMask = char(fread(fid,1,'uchar')');

gSetUp.trigger_mode = fread(fid,1,'int16')';
fseek(fid, ceil(ftell(fid)/4)*4, -1);
gSetUp.accept_reject_Flag = fread(fid,1,'int32')';
gSetUp.run_time_display = (fread(fid,1,'int16')');
fseek(fid, ceil(ftell(fid)/4)*4, -1);
gSetUp.zero_Head_Flag = fread(fid,1,'int32')';
fseek(fid, ceil(ftell(fid)/4)*4, -1);
gSetUp.artifact_mode = fread(fid,1,'int32')';
gSetUp.padding = fread(fid,1,'int32')';

nfSetUp.nf_run_name           = char(fread(fid, 32,'char')');
nfSetUp.nf_run_title          = char(fread(fid,256,'char')');
nfSetUp.nf_instruments        = char(fread(fid, 32,'char')');
nfSetUp.nf_collect_descriptor = char(fread(fid, 32,'char')');
nfSetUp.nf_subject_id         = char(fread(fid, 32,'char')');
nfSetUp.nf_operator           = char(fread(fid, 32,'char')');
#% prevent out of range character conversion warning
tmp = fread(fid,60,'char')';
tmp(tmp<0) = 0; 
nfSetUp.nf_sensorFileName = tmp; 

fseek(fid,ceil(ftell(fid)/4)*4,-1);
nfSetUp.rdlen = fread(fid,1,'int32')';


#%#% ===== READ FILTERS =====
fseek(fid,1844,-1);
#% Run Description
res4.rdesc = fread(fid,nfSetUp.rdlen,'*char');
#% Filters
classType = {'CLASSERROR','BUTTERWORTH','','',''};
filtType  = {'TYPERROR','LOWPASS','HIGHPASS','NOTCH','','',''};
#% Number of filters
no_filters = fread(fid,1,'int16');
#% Read all filters
[filter(1:no_filters)] = struct('freq',[],'fClass',[],'fType',[],'numParam',[],'params',[]);
for fi = 1:no_filters,
    filter(fi).freq     = fread(fid,1,'double');
    #% Filter class
    iClass = fread(fid,1,'int32') + 1;
    if (iClass <= length(classType))
        filter(fi).fClass = classType{iClass};
    else
        filter(fi).fClass = 'UNKNOWN';
    end
    #% Filter type
    iType = fread(fid,1,'int32') + 1;
    if (iType <= length(filtType))
        filter(fi).fType = filtType{iType};
    else
        filter(fi).fType = 'UNKNOWN';
    end
    #% Parameters
    filter(fi).numParam = fread(fid,1,'int16');
    filter(fi).params   = fread(fid,filter(fi).numParam,'double');
end
#% Display filters
for fi = 1:no_filters
    disp(sprintf('BST>   Filter - %d',fi));
    disp(sprintf('BST>         -> Frequency: %g Hz',filter(fi).freq));
    disp(sprintf('BST>         -> Class: %s',filter(fi).fClass));
    disp(sprintf('BST>         -> Type: %s',filter(fi).fType));
    disp(sprintf('BST>         -> Number of parameters: %d',filter(fi).numParam));
    if ~isempty(filter(fi).params)
        disp(sprintf('BST>         -> Parameter Value(s): %g',filter(fi).params));
    end
end


#%#% ===== READ COILS INFORMATION =====
#% Channel names
for chan = 1:gSetUp.no_channels
    tmp = fread(fid,32,'uchar')';
    tmp = char(tmp);
    tmp(tmp>127) = 0;
    channel_names{chan}       = strtok(tmp,char(0));
    channel_names_short{chan} = char(strtok(channel_names{chan},'-'));
end

#% Sensor types
CoilType = {'CIRCULAR','SQUARE','???'};
#% Read description of all sensors
for chan = 1:gSetUp.no_channels
    SensorRes(chan).sensorTypeIndex = fread(fid,1,'int16');
    SensorRes(chan).originalRunNum = fread(fid,1,'int16');

    id = fread(fid,1,'int32')+1;
    if isempty(id)
        id = -1;
    end
    if (id > 3) || (id <0)
        id = 3;
    end

    SensorRes(chan).coilShape  = CoilType{id};
    SensorRes(chan).properGain = fread(fid,1,'double');
    SensorRes(chan).qGain      = fread(fid,1,'double');
    SensorRes(chan).ioGain     = fread(fid,1,'double');
    SensorRes(chan).ioOffset   = fread(fid,1,'double');
    SensorRes(chan).numCoils   = fread(fid,1,'int16');
    SensorRes(chan).grad_order_no = fread(fid,1,'int16');
    SensorRes(chan).stimPolarity = fread(fid,1,'int32'); #% 4.2 format
    
    for coil = 1:MAX_COILS
        SensorRes(chan).coilTbl(coil).position.x = fread(fid,1,'double');
        SensorRes(chan).coilTbl(coil).position.y = fread(fid,1,'double');
        SensorRes(chan).coilTbl(coil).position.z = fread(fid,1,'double');
        SensorRes(chan).coilTbl(coil).position.junk = fread(fid,1,'double');
        SensorRes(chan).coilTbl(coil).orient.x = fread(fid,1,'double');
        SensorRes(chan).coilTbl(coil).orient.y = fread(fid,1,'double');
        SensorRes(chan).coilTbl(coil).orient.z = fread(fid,1,'double');
        SensorRes(chan).coilTbl(coil).orient.junk = fread(fid,1,'double');
        SensorRes(chan).coilTbl(coil).numturns = fread(fid,1,'int16');
        padding = fread(fid,1,'int32');
        padding = fread(fid,1,'int16');
        SensorRes(chan).coilTbl(coil).area = fread(fid,1,'double');
    end

    for coil = 1:MAX_COILS
        SensorRes(chan).HdcoilTbl(coil).position.x = fread(fid,1,'double');
        SensorRes(chan).HdcoilTbl(coil).position.y = fread(fid,1,'double');
        SensorRes(chan).HdcoilTbl(coil).position.z = fread(fid,1,'double');
        SensorRes(chan).HdcoilTbl(coil).position.junk = fread(fid,1,'double');
        SensorRes(chan).HdcoilTbl(coil).orient.x = fread(fid,1,'double');
        SensorRes(chan).HdcoilTbl(coil).orient.y = fread(fid,1,'double');
        SensorRes(chan).HdcoilTbl(coil).orient.z = fread(fid,1,'double');
        SensorRes(chan).HdcoilTbl(coil).orient.junk = fread(fid,1,'double');
        SensorRes(chan).HdcoilTbl(coil).numturns = fread(fid,1,'int16');
        padding = fread(fid,1,'int32');
        padding = fread(fid,1,'int16');
        SensorRes(chan).HdcoilTbl(coil).area = fread(fid,1,'double');
    end
end
#% === CHANNEL TYPES ===
imegsens   = find([SensorRes.sensorTypeIndex] == 5); #% MEG sensors
ieegsens   = find([SensorRes.sensorTypeIndex] == 9); #% EEG sensors
irefsens   = find(ismember([SensorRes.sensorTypeIndex], [0,1,2,3]));  #% Reference Channels
iothersens = find(ismember([SensorRes.sensorTypeIndex], 10:30));      #% OTHER: 'ADC', localization coils...
istimsens  = find(ismember([SensorRes.sensorTypeIndex], [11,19,20])); #% STIM (Stimulation input)
irefsens_init = irefsens;

#% Close file
fclose(fid);


#% ===== DISPLAY RESULTS =====
#% Get recordings properties
duration = (gSetUp.no_samples * gSetUp.no_trials) / gSetUp.sample_rate;
#% Sensor types
strChan = '';
allSensors = [SensorRes.sensorTypeIndex];
sensorsId = unique(allSensors);
for i = 1:length(sensorsId)
    strChan = [strChan, ' ', SensorTypes{sensorsId(i)+1}, '(', num2str(nnz(allSensors==sensorsId(i))), '),'];
end
#% Display 
disp('System: CTF');
disp(['Title: ' nfSetUp.nf_run_title]);
disp(['Date: ' res4.data_date]);
disp(sprintf('Duration: %d s', round(duration)));
disp(sprintf('Sampling: %d Hz', round(gSetUp.sample_rate)));
disp(sprintf('NumChannels: %d', gSetUp.no_channels));
disp(['Channels:', strChan(1:end-1)]);








